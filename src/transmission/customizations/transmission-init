#! /bin/sh
# Provides:          transmission-daemon
# Required-Start:    networking
# Required-Stop:     networking
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: Start the transmission BitTorrent daemon client.
#Options:
# -h   --help                             Display this help page and exit
# -a   --allowed              <list>      Allowed IP addresses. (Default:
#                                         127.0.0.1)
# -b   --blocklist                        Enable peer blocklists
# -B   --no-blocklist                     Disable peer blocklists
# -c   --watch-dir            <directory> Where to watch for new .torrent files
# -C   --no-watch-dir                     Disable the watch-dir
#      --incomplete-dir       <directory> Where to store new torrents until
#                                         they're complete
#      --no-incomplete-dir                Don't store incomplete torrents in a
#                                         different location
# -d   --dump-settings                    Dump the settings and exit
# -e   --logfile              <filename>  Dump the log messages to this filename
# -f   --foreground                       Run in the foreground instead of
#                                         daemonizing
# -g   --config-dir           <path>      Where to look for configuration files
# -p   --port                 <port>      RPC port (Default: 9091)
# -t   --auth                             Require authentication
# -T   --no-auth                          Don't require authentication
# -u   --username             <username>  Set username for authentication
# -v   --password             <password>  Set password for authentication
# -V   --version                          Show version number and exit
#      --log-error                        Show error messages
#      --log-info                         Show error and info messages
#      --log-debug                        Show error, info, and debug messages
# -w   --download-dir         <path>      Where to save downloaded data
#      --paused                           Pause all torrents on startup
# -o   --dht                              Enable distributed hash tables (DHT)
# -O   --no-dht                           Disable distributed hash tables (DHT)
# -y   --lpd                              Enable local peer discovery (LPD)
# -Y   --no-lpd                           Disable local peer discovery (LPD)
#      --utp                              Enable uTP for peer connections
#      --no-utp                           Disable uTP for peer connections
# -P   --peerport             <port>      Port for incoming peers (Default:
#                                         51413)
# -m   --portmap                          Enable portmapping via NAT-PMP or UPnP
# -M   --no-portmap                       Disable portmapping
# -L   --peerlimit-global     <limit>     Maximum overall number of peers
#                                         (Default: 200)
# -l   --peerlimit-torrent    <limit>     Maximum number of peers per torrent
#                                         (Default: 50)
# -er  --encryption-required              Encrypt all peer connections
# -ep  --encryption-preferred             Prefer encrypted peer connections
# -et  --encryption-tolerated             Prefer unencrypted peer connections
# -i   --bind-address-ipv4    <ipv4 addr> Where to listen for peer connections
# -I   --bind-address-ipv6    <ipv6 addr> Where to listen for peer connections
# -r   --rpc-bind-address     <ipv4 addr> Where to listen for RPC connections
# -gsr --global-seedratio     ratio       All torrents, unless overridden by a
#                                         per-torrent setting, should seed until
#                                         a specific ratio
# -GSR --no-global-seedratio              All torrents, unless overridden by a
#                                         per-torrent setting, should seed
#                                         regardless of ratio
# -x   --pid-file             <pid-file>  Enable PID file

# DO NOT CHANGE THESE 2 VARIABLE NAMES
TRANSMISSION_HOME=$SNAP_DATA/transmission
TRANSMISSION_WEB_HOME=$SNAP/share/transmission/web

RO_TRANSMISSION_HOME=$SNAP/transmission
RO_SETTINGS=$RO_TRANSMISSION_HOME/settings.json
RW_SETTINGS=$TRANSMISSION_HOME/settings.json
NAME=transmission-daemon
BIN=$SNAP/bin/$NAME
PIDFILE=$TRANSMISSION_HOME/$NAME.pid
LOGFILE=$TRANSMISSION_HOME/$NAME.log

RW_TORRENTS=/media/transmissionbt/torrents
RW_INCOMPLETE=/media/transmissionbt/incomplete
RW_DOWNLOADS=/media/transmissionbt/downloads
RW_TORRENTS_OLD=$SNAP_COMMON/torrents
RW_INCOMPLETE_OLD=$SNAP_COMMON/incomplete
RW_DOWNLOADS_OLD=$SNAP_COMMON/downloads

# As a daemon
OPTS="--blocklist --pid-file $PIDFILE --logfile $LOGFILE --download-dir $RW_DOWNLOADS --incomplete-dir $RW_INCOMPLETE --watch-dir $RW_TORRENTS"

create_filesystem() {
	if [ -d $TRANSMISSION_HOME ]; then
		echo "Using existing transmission folder"
	else
		echo "Creating transmission folder"
		mkdir -p $TRANSMISSION_HOME
		touch $LOGFILE

		echo "Creating original transmission settings"
		cp $RO_SETTINGS $RW_SETTINGS
		chmod 770 $RW_SETTINGS
		#chown :ubuntu $RW_SETTINGS
	fi

	# This currently works well because we're unconfined, but it will break in the future and
	# will require to wait for the user to connect the plugs and slots
	if [ ! -d $RW_TORRENTS ]; then
		echo "Creating media folders"
		mkdir -p -m 770 $RW_TORRENTS
		#chown :ubuntu $SNAP_DATA/torrents
		mkdir -p -m 770 $RW_DOWNLOADS
		#chown :ubuntu $SNAP_DATA/downloads
		mkdir -p -m 770 $RW_INCOMPLETE
		#chown :ubuntu $SNAP_DATA/incomplete

		# Move data from old folders
		mv $RW_TORRENTS_OLD/* $RW_TORRENTS/
		mv $RW_INCOMPLETE_OLD/* $RW_INCOMPLETE/
		mv $RW_DOWNLOADS_OLD/* $RW_DOWNLOADS/
		rm -rf $RW_TORRENTS_OLD
		rm -rf $RW_INCOMPLETE_OLD
		rm -rf $RW_DOWNLOADS_OLD
	fi
}

update_blocklists() {
	# That's the location storing the blocklists
	if [ ! -d $TRANSMISSION_HOME/blocklists ]; then
		mkdir -p $TRANSMISSION_HOME/blocklists
	fi

	# Use the standard blocklists file if it doesn't exist
	if [ ! -f $TRANSMISSION_HOME/blocklists.sh ]; then
		cp $RO_TRANSMISSION_HOME/blocklists.sh $TRANSMISSION_HOME/blocklists.sh
	fi

	# Execute the RW script
	echo "Updating blocklists..."
	. $TRANSMISSION_HOME/blocklists.sh
}

case "$1" in
	start)
		if [ -f $PIDFILE ]; then
			echo "$PIDFILE exists, process is already running or crashed"
		else
			create_filesystem
			update_blocklists
			# Export the configuration/web directory, if set
			if [ -n "$TRANSMISSION_HOME" ]; then
				  export TRANSMISSION_HOME
			fi
			if [ -n "$TRANSMISSION_WEB_HOME" ]; then
				  export TRANSMISSION_WEB_HOME
			fi
			echo "Starting $NAME..."
			$BIN $OPTS
		fi
		;;
	stop)
		if [ ! -f $PIDFILE ]; then
			echo "$PIDFILE does not exist, process is not running"
		else
			PID=$(cat $PIDFILE)
			echo "Stopping ..."
			kill -QUIT $PID
			while [ -x /proc/${PID} ]; do
				echo "Waiting for $NAME to shutdown ..."
				sleep 1
			done
			rm -f $PIDFILE
			echo "$NAME stopped"
		fi
		;;
	*)
		echo "Please use start, stop or restart as first argument"
		;;
esac
exit 0;
